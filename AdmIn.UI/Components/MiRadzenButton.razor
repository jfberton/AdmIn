<RadzenButton Disabled="@GetDisabled()"
    Style="@Style"
    Class="@GetButtonClass()"
    Icon="@GetIcon()"
    Text="@GetText()"
    Title="@GetTitle()"
    ButtonStyle="@ButtonStyle"
    Size="@Size"
    Variant="@Variant"
    Shade="@Shade"
    Click="OnClickHandler" />

@code {
    private bool isDisabled = false;

    [Parameter] public string Text { get; set; } // Texto inicial
    [Parameter] public string Icon { get; set; } // Clase CSS del ícono (ejemplo: "fas fa-save")
    [Parameter] public string DisabledIcon { get; set; } // Clase CSS del ícono deshabilitado
    [Parameter] public string Style { get; set; } // Estilo en línea
    [Parameter] public string AdditionalClass { get; set; } // Clases CSS adicionales
    [Parameter] public bool Disabled { get; set; } //en algunos casos necesito deshabilitar el botón independientemente de si fue precionado o no

    //propiedades agregadas
    [Parameter] public string Title { get; set; } // Título del botón
    [Parameter] public ButtonSize Size { get; set; } // Tamaño del botón
    [Parameter] public ButtonStyle ButtonStyle { get; set; } // Estilo del botón (ej. Primary, Default, etc.)
    [Parameter] public Variant Variant { get; set; } // Variante del botón (ej. Filled, Outlined, etc.)
    [Parameter] public Shade Shade { get; set; } //

    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; } // Evento personalizado del botón

    protected override void OnInitialized()
    {
        // Inicializa el texto y el ícono inicial
        if (string.IsNullOrEmpty(Text))
        {
            Text = string.Empty; // Texto vacío si no está definido
        }
    }

    private async Task OnClickHandler(MouseEventArgs e)
    {
        if (isDisabled)
            return;

        isDisabled = true;

        try
        {
            // // Simula una operación prolongada
            // await Task.Delay(2000);

            if (OnClick.HasDelegate)
            {
                await OnClick.InvokeAsync(e); // Invocar el evento del botón
            }
        }
        finally
        {
            isDisabled = false; // Habilitar el botón nuevamente
        }
    }

    private string GetIcon()
    {
        // Si está deshabilitado, muestra el ícono del reloj de arena
        return isDisabled ? DisabledIcon ?? "hourglass_empty" : Icon;
    }

    private bool GetDisabled()
    {
        // Si está deshabilitado, muestra el ícono del reloj de arena
        return (isDisabled || Disabled);
    }

    private string GetText()
    {
        // Si está deshabilitado y tiene texto, muestra "Procesando..."
        return isDisabled ? (string.IsNullOrEmpty(Text) ? string.Empty : "Procesando...") : Text;
    }

    private string GetTitle()
    {
        // Si está deshabilitado y tiene texto, muestra "Procesando..."
        return Title;
    }

    private string GetButtonClass()
    {
        return $"rz-button {AdditionalClass}";
    }
}
