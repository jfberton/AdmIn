@using AdmIn.UI.Services.UtilityServices
@inject LogHelper LogHelper

<RadzenButton Disabled="@GetDisabled()"
              Style="@Style"
              Class="@GetButtonClass()"
              Icon="@GetIcon()"
              Text="@GetText()"
              Title="@GetTitle()"
              ButtonStyle="@ButtonStyle"
              Size="@Size"
              Variant="@Variant"
              Shade="@Shade"
              Click="OnClickHandler" />

@code {
    private bool isDisabled = false;

    [Inject] private DialogService DialogService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public string Icon { get; set; }
    [Parameter] public string DisabledIcon { get; set; } = "hourglass_empty";
    [Parameter] public string Style { get; set; }
    [Parameter] public string AdditionalClass { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public ButtonSize Size { get; set; }
    [Parameter] public ButtonStyle ButtonStyle { get; set; }
    [Parameter] public Variant Variant { get; set; }
    [Parameter] public Shade Shade { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private async Task OnClickHandler(MouseEventArgs e)
    {
        if (isDisabled) return;

        isDisabled = true;
        await LogHelper.Info("MiRadzenButton - Deshabilito el botón y muestro el busy dialog");
        // Muestra el diálogo sin bloquear
        ShowBusyDialog();

        try
        {
            if (OnClick.HasDelegate)
            {
                await LogHelper.Debug("MiRadzenButton - Llamo al método asociado");
                await OnClick.InvokeAsync(e);
            }
        }
        finally
        {
            CloseBusyDialog();
            isDisabled = false;
            await LogHelper.Info("MiRadzenButton - Cierro el busy dialog y vuelvo a habilitar el botón");
        }
    }

    private void ShowBusyDialog()
    {
        DialogService.Open("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
        <RadzenIcon Icon="hourglass_empty" Style="font-size: 48px; color: #007bff;" />
        <RadzenText TextStyle="TextStyle.H6">Procesando, por favor espera...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    private void CloseBusyDialog()
    {
        DialogService.Close();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        CloseBusyDialog();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private string GetIcon() => isDisabled ? DisabledIcon : Icon;

    private bool GetDisabled() => isDisabled || Disabled;

    private string GetText() => isDisabled ? "Procesando..." : Text;

    private string GetTitle() => Title;

    private string GetButtonClass() => $"rz-button {AdditionalClass}";
}
