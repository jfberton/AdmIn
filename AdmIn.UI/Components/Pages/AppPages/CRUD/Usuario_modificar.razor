@page "/usuarios/update/{id}"
@inherits BaseComponent

@using AdmIn.Business.Entidades
@using System.Text.RegularExpressions
@using AdmIn.Common
@using AdmIn.UI.Services
@using AdmIn.UI.Services.UtilityServices

@inject IServ_Usuario serv_usuario;
@inject IServ_Rol serv_rol;
@inject IServ_Permiso serv_permiso;

<RadzenTemplateForm @ref="form" TItem="Usuario" Data="@usuario">
    <RadzenRow class="rz-mx-2 rz-mb-8">
        <RadzenColumn>
            <RadzenFormField Text="Nombre" Variant="Variant.Outlined" Style="width:100%">
                <ChildContent>
                    <RadzenTextBox @bind-Value=usuario.Nombre MaxLength="50" Name="componente_nombre" TValue="string" />
                </ChildContent>
                <Helper>
                    <RadzenCustomValidator Component="componente_nombre" Validator="@(() => Validar_nombre(usuario.Nombre))" Text="Ingrese nombre" Popup=true />
                </Helper>
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>
    
    <!-- Nuevo campo Activo -->
    <RadzenRow class="rz-mx-2 rz-mb-8">
        <RadzenColumn>
            <RadzenFormField Text="Estado">
                <Start>
                    <RadzenCheckBox @bind-Value="usuario.Activo" Name="componente_activo" />
                </Start>
                <ChildContent>
                    <RadzenLabel Text="Activo" Component="CheckBox1" Class="rz-mx-4" />
                </ChildContent>
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="rz-mx-2 rz-mb-8">
        <RadzenColumn>
            <RadzenFormField Text="E-mail" Variant="Variant.Outlined" Style="width:100%">
                <ChildContent>
                    <RadzenTextBox @bind-Value=usuario.Email MaxLength="50" Name="componente_email" TValue="string" />
                </ChildContent>
                <Helper>
                    <RadzenCustomValidator Component="componente_email" Validator="@(() => Validar_email(usuario.Email))" Text="Ingrese un email válido" Popup=true />
                </Helper>
            </RadzenFormField>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="rz-mx-2 rz-mb-8">
        <RadzenColumn Size="6">
            <RadzenLabel Text="Roles" />
            <RadzenListBox @bind-Value="valuesRoles" TValue="IEnumerable<int>" Change="@(args => PermisosRolesSeleccionados(args as IEnumerable<int>))" Data="@roles" ons AllowSelectAll="false"
            TextProperty="Nombre" ValueProperty="Id" Style="width:100%" Multiple="true" />
        </RadzenColumn>
        <RadzenColumn Size="6">
            <RadzenLabel Text="Permisos asociados a los roles seleccionados" />
            @if (permisos == null || permisos.Count == 0)
            {
                <RadzenText Text="No existen permisos asociados.-" />
            }
            else
            {
                <RadzenListBox @bind-Value=@valuesPermisos ReadOnly TValue="IEnumerable<int>" Data="@permisos" Style="width: 100%; height:200px" TextProperty="Nombre" ValueProperty="Id" />
            }
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="rz-mx-2 rz-mb-8" JustifyContent="JustifyContent.End">
        <RadzenColumn>
            <MiRadzenButton ButtonStyle="ButtonStyle.Primary" Text="Guardar" OnClick="@OnSubmit" />
            <MiRadzenButton ButtonStyle="ButtonStyle.Primary" Text="Cancelar" OnClick="@OnCancel" />
        </RadzenColumn>
    </RadzenRow>
</RadzenTemplateForm>

@code {
    RadzenTemplateForm<Usuario> form;
    Usuario usuario = new Usuario();

    private List<Permiso> permisos { get; set; }

    private List<Rol> roles { get; set; }

    IEnumerable<int> valuesPermisos;
    IEnumerable<int> valuesRoles;

    [Parameter]
    public string id { get; set; }

    #region Validaciones

    public bool Is_valid()
    {

        form.EditContext.Validate();
        return form.IsValid;
    }

    bool Validar_nombre(string nombre)
    {
        return !string.IsNullOrEmpty(nombre);
    }

    bool Validar_Password(string password)
    {
        //aca se pueden aplicar las restricciones para considerar el password valido
        return !string.IsNullOrEmpty(password);
    }

    bool Validar_email(string email)
    {
        bool valid = !string.IsNullOrEmpty(email);
        string pattern = @"^\S+@\S+\.\S+$";
        Regex regex = new Regex(pattern);

        return valid && regex.IsMatch(email);
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        EstablecerTituloPagina("Usuarios", "Modificar");

        int id_usuario;

        var rta_roles = await serv_rol.Obtener_todos();

        if (rta_roles.Correcto)
        {
            roles = rta_roles.Datos.ToList();
        }

        if (int.TryParse(id, out id_usuario))
        {
            var rta_usuario = await serv_usuario.Obtener_por_id(id_usuario);
            if (rta_usuario.Correcto)
            {
                usuario = rta_usuario.Datos;
                valuesRoles = usuario.Roles.Select(r => r.Id).AsEnumerable();

                await PermisosRolesSeleccionados(valuesRoles);

                StateHasChanged();
            }
        }
    }

    async Task PermisosRolesSeleccionados(IEnumerable<int> idRoles)
    {
        // HashSet para evitar duplicados
        var permisosUnicos = new HashSet<Permiso>();

        foreach (int idRol in idRoles)
        {
            var rta_permisos = await serv_permiso.Obtener_por_rol(idRol);
            if (rta_permisos.Correcto)
            {
                foreach (var permiso in rta_permisos.Datos) // Suponiendo que Data contiene la lista de permisos
                {
                    permisosUnicos.Add(permiso); // HashSet evita duplicados automáticamente
                }
            }
            else
            {
                base.MostrarNotificacion(NotificationSeverity.Error, "Error!", "Error al obtener los permisos asociados al rol");
            }
        }

        // Convertir HashSet a List si es necesario
        permisos = permisosUnicos.ToList();
    }


    async Task OnSubmit()
    {
        if (Is_valid())
        {
            try
            {
                usuario.Roles.Clear();

                foreach (int id_rol in valuesRoles)
                {
                    Rol rol = roles.FirstOrDefault(x => x.Id == id_rol);
                    usuario.Roles.Add(rol);
                }

                DTO<Usuario> usuario_respuesta = await serv_usuario.Actualizar(usuario);
                if (usuario_respuesta != null && usuario_respuesta.Correcto)
                {
                    base.MostrarNotificacion(NotificationSeverity.Success, "Modificación exitosa", "Los cambios se realizaron correctamente.", "/usuarios");
                }
                else
                {
                    base.MostrarNotificacion(NotificationSeverity.Error, "Error!", $"Error al guardar los cambios: {usuario_respuesta.Mensaje}");
                }
            }
            catch (Exception ex)
            {
                base.MostrarNotificacion(NotificationSeverity.Error, "Error!", $"Error al guardar los cambios: {ex.Message}");
            }
        }
    }

    async Task OnCancel()
    {
        base.IrA("/usuarios");
    }

}