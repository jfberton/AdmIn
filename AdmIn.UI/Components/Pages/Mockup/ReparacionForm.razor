@using AdmIn.Business.Entidades
@using AdmIn.UI.Services

@inherits BaseComponent

<EditForm Model="@reparacion" OnValidSubmit="@GuardarReparacion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-header">
            <h5>@Titulo</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Inmueble *</label>
                    <RadzenDropDown Data="@inmuebles" TextProperty="Direccion" ValueProperty="Id"
                                    @bind-Value="@reparacion.InmuebleId" Change="@OnInmuebleChange"
                                    Placeholder="Seleccione un inmueble" Style="width:100%" />
                    <ValidationMessage For="@(() => reparacion.InmuebleId)" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Categoría *</label>
                    <RadzenDropDown Data="@categorias" TextProperty="Categoria" ValueProperty="Id"
                                    @bind-Value="@reparacion.Categoria.Id" Placeholder="Seleccione categoría"
                                    Style="width:100%" />
                    <ValidationMessage For="@(() => reparacion.Categoria.Id)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label">Profesional (opcional)</label>
                    <RadzenDropDown Data="@empleados" TextProperty="Nombre" ValueProperty="EmpleadoId"
                                    @bind-Value="@reparacion.EmpleadoId" Placeholder="Seleccione profesional"
                                    Style="width:100%">
                        <Template Context="empleado">
                            @empleado.Nombre (@empleado.Especialidad.Especialidad) ⭐@(GetCalificacionPromedio(empleado.EmpleadoId))
                        </Template>
                    </RadzenDropDown>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-12">
                    <label class="form-label">Descripción *</label>
                    <RadzenTextArea @bind-Value="@reparacion.Descripcion" Style="width:100%" Rows="3" />
                    <ValidationMessage For="@(() => reparacion.Descripcion)" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-12">
                    <label class="form-label">Imágenes (opcional)</label>
                    <RadzenUpload ChooseText="Adjuntar imágenes" Multiple="true" Accept="image/*"
                                  MaxFileSize="5000000" TotalFilesSize="10000000" Style="width:100%" />
                </div>
            </div>
        </div>
        <div class="card-footer text-end">
            <button type="submit" class="btn btn-primary me-2">
                <i class="fas fa-save"></i> Guardar
            </button>
            <button type="button" class="btn btn-secondary" @onclick="VolverAListado">
                <i class="fas fa-times"></i> Cancelar
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Inject]
    protected IServ_Mock ServicioReparaciones { get; set; }

    [Inject]
    protected IServ_Mock InmuebleService { get; set; }

    [Inject]
    protected IServ_Mock EmpleadoService { get; set; }

    [Parameter]
    public Reparacion reparacion { get; set; } = new Reparacion();

    [Parameter]
    public string Titulo { get; set; } = "Nueva Reparación";

    private IEnumerable<Inmueble> inmuebles = new List<Inmueble>();
    private IEnumerable<ReparacionCategoria> categorias = new List<ReparacionCategoria>();
    private IEnumerable<Empleado> empleados = new List<Empleado>();
    private Dictionary<int, double> calificacionesEmpleados = new Dictionary<int, double>();

    protected override async Task OnInitializedAsync()
    {
        EstablecerTituloPagina(Titulo);
        inmuebles = await InmuebleService.ObtenerInmuebles();
        categorias = await ServicioReparaciones.ObtenerCategoriasReparacion();
        empleados = await EmpleadoService.ObtenerEmpleados();

        // Cargar calificaciones de empleados
        foreach (var empleado in empleados)
        {
            var calificaciones = await ServicioReparaciones.ObtenerCalificacionesEmpleado(empleado.EmpleadoId);
            if (calificaciones.Any())
            {
                calificacionesEmpleados[empleado.EmpleadoId] = calificaciones.Average(c => (c.CalificacionTrabajo + c.CalificacionComportamiento) / 2);
            }
            else
            {
                calificacionesEmpleados[empleado.EmpleadoId] = 0;
            }
        }
    }

    private double GetCalificacionPromedio(int empleadoId)
    {
        return calificacionesEmpleados.ContainsKey(empleadoId) ? calificacionesEmpleados[empleadoId] : 0;
    }

    private async Task OnInmuebleChange(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int inmuebleId))
        {
            var inmueble = await InmuebleService.ObtenerInmueblePorId(inmuebleId);
            reparacion.Inmueble = inmueble;
            reparacion.InmuebleId = inmuebleId;
        }
    }

    protected virtual async Task GuardarReparacion()
    {
        // Implementado en las clases hijas
    }

    protected virtual void VolverAListado()
    {
        IrA("/m/reparaciones");
    }
}