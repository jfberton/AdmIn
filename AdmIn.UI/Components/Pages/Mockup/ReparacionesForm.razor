@using AdmIn.Business.Entidades
@using AdmIn.UI.Services

@inherits BaseComponent

<style>
	.image-thumbnails {
	display: flex;
	flex-wrap: wrap;
	gap: 15px;
	margin-top: 10px;
	}

	.thumbnail-container {
	position: relative;
	text-align: center;
	}

	.thumbnail-wrapper {
	position: relative;
	display: inline-block;
	}

	.img-thumbnail {
	width: 100px;
	height: 100px;
	object-fit: cover;
	border: 1px solid #ddd;
	border-radius: 4px;
	padding: 5px;
	background: white;
	}

	.remove-btn {
	position: absolute;
	top: -10px;
	right: -10px;
	width: 25px;
	height: 25px;
	border-radius: 50%;
	padding: 0;
	display: flex;
	align-items: center;
	justify-content: center;
	}

	.thumbnail-name {
	font-size: 0.8rem;
	margin-top: 5px;
	max-width: 100px;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
	}
</style>



@using AdmIn.UI.Services.Mock @* Added for new services *@
@code {
	[Inject]
	protected IReparacionService ReparacionMockService { get; set; } // Renamed

	[Inject]
	protected IInmuebleService InmuebleMockService { get; set; } // Renamed

	[Inject]
	protected IEmpleadoService EmpleadoMockService { get; set; } // Renamed

	[Parameter]
	public Reparacion reparacion { get; set; } = new Reparacion();

	[Parameter]
	public string Titulo { get; set; } = "Nueva Reparación";

	private bool IsNuevaReparacion => Titulo == "Nueva Reparación";

	private RadzenUpload uploadControl;

	public List<Imagen> imagenesSeleccionadas = new List<Imagen>();

	private Imagen? imagenSeleccionada;

	private IEnumerable<Inmueble> inmuebles = new List<Inmueble>();
	private IEnumerable<ReparacionCategoria> categorias = new List<ReparacionCategoria>();
	private IEnumerable<Empleado> empleados = new List<Empleado>();
	private Dictionary<int, double> calificacionesEmpleados = new Dictionary<int, double>();

	private int selectedCategoriaId;

	protected override async Task OnInitializedAsync()
	{
		EstablecerTituloPagina(Titulo);
		inmuebles = await InmuebleMockService.ObtenerInmuebles();
		categorias = await ReparacionMockService.ObtenerCategoriasReparacion();
		empleados = await EmpleadoMockService.ObtenerEmpleados();

		if (IsNuevaReparacion && categorias.Any())
		{
			reparacion.Categoria = categorias.First();
		}

		// Sincroniza el ID de la categoría seleccionada
		selectedCategoriaId = reparacion.Categoria?.Id ?? 0;

		// Cargar calificaciones de empleados
		foreach (var empleado in empleados)
		{
			var calificaciones = await EmpleadoMockService.ObtenerCalificacionesEmpleado(empleado.EmpleadoId);
			if (calificaciones.Any())
			{
				calificacionesEmpleados[empleado.EmpleadoId] = calificaciones.Average(c => (c.CalificacionTrabajo + c.CalificacionComportamiento) / 2);
			}
			else
			{
				calificacionesEmpleados[empleado.EmpleadoId] = 0;
			}
		}
	}

	private async Task OnFileUpload(UploadChangeEventArgs args)
	{
		if (args.Files != null && args.Files.Any())
		{
			// Validar cantidad máxima
			if (imagenesSeleccionadas.Count() + args.Files.Count() > 5)
			{
				MostrarNotificacion(NotificationSeverity.Warning,
										"Límite excedido",
										"Solo puedes subir hasta 5 imágenes");
				await uploadControl.ClearFiles();
				return;
			}

			// Procesar cada archivo
			foreach (var file in args.Files)
			{
				try
				{
					// Convertir a base64
					var base64 = await ConvertToBase64(file);

					// Agregar a la lista
					imagenesSeleccionadas.Add(new Imagen
						{
							Id = Guid.NewGuid(),
							Descripcion = file.Name,
							Url = base64,
							Size = file.Size,
							ContentType = file.ContentType
						});
				}
				catch (Exception ex)
				{
					MostrarNotificacion(NotificationSeverity.Error,
											"Error al procesar imagen",
											$"No se pudo cargar {file.Name}: {ex.Message}");
				}
			}

			// Forzar actualización de la UI
			StateHasChanged();

			// Limpiar el control de upload
			await uploadControl.ClearFiles();
		}
	}

	private void AbrirModal(Imagen img)
	{
		imagenSeleccionada = img;
	}

	private void CerrarModal()
	{
		imagenSeleccionada = null;
	}

	private void ConfirmarEliminar(Guid imageId)
	{
		RemoveImage(imageId);
		CerrarModal();
	}

	private void RemoveImage(Guid imageId)
	{
		var imageToRemove = imagenesSeleccionadas.FirstOrDefault(i => i.Id == imageId);
		if (imageToRemove != null)
		{
			imagenesSeleccionadas.Remove(imageToRemove);
			StateHasChanged(); // Actualizar UI
		}
	}

	private async Task<string> ConvertToBase64(IBrowserFile file)
	{
		try
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB
			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			return $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error converting image: {ex}");
			throw;
		}
	}

	private void OnCategoriaChange(object value)
	{
		if (value != null && int.TryParse(value.ToString(), out int categoriaId))
		{
			reparacion.Categoria = categorias.FirstOrDefault(c => c.Id == categoriaId);
		}
	}

	private double GetCalificacionPromedio(int empleadoId)
	{
		return calificacionesEmpleados.ContainsKey(empleadoId) ? calificacionesEmpleados[empleadoId] : 0;
	}

	private async Task OnInmuebleChange(object value)
	{
		if (value != null && int.TryParse(value.ToString(), out int inmuebleId))
		{
			var inmueble = await InmuebleMockService.ObtenerInmueblePorId(inmuebleId);
			reparacion.Inmueble = inmueble;
			reparacion.InmuebleId = inmuebleId;
		}
	}

	protected virtual async Task OnValidSubmit()
	{
		// Validación de imágenes (siempre aplica)
		if (imagenesSeleccionadas.Count == 0)
		{
			MostrarNotificacion(NotificationSeverity.Error,
									"Error",
									"Debe adjuntar al menos una imagen");
			return;
		}

		// Validación específica para nuevas reparaciones
		if (IsNuevaReparacion && reparacion.EmpleadoId <= 0)
		{
			MostrarNotificacion(NotificationSeverity.Error, "Error", "Debe seleccionar un profesional");
			return;
		}

        if (IsNuevaReparacion && reparacion.InmuebleId <= 0)
        {
            MostrarNotificacion(NotificationSeverity.Error, "Error", "Debe seleccionar un inmueble");
            return;
        }

        if (IsNuevaReparacion && reparacion.Categoria == null)
        {
            MostrarNotificacion(NotificationSeverity.Error, "Error", "Debe seleccionar una categoría");
            return;
        }

        if (IsNuevaReparacion && string.IsNullOrWhiteSpace(reparacion.Descripcion))
        {
            MostrarNotificacion(NotificationSeverity.Error, "Error", "Debe ingresar una descripción");
            return;
        }



		await GuardarReparacion();
	}

	protected virtual async Task GuardarReparacion()
	{
		// Implementado en las clases hijas
	}

	public virtual void VolverAListado()
	{
		IrA("/m/reparaciones");
	}

	private void EliminarImagen(Guid id)
	{
		var img = imagenesSeleccionadas.FirstOrDefault(x => x.Id == id);
		if (img != null)
			imagenesSeleccionadas.Remove(img);
	}

	protected RenderFragment RenderFormContent() => __builder =>
				{
					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label">Inmueble *</label>
							<RadzenDropDown Data="@inmuebles" TextProperty="Direccion" ValueProperty="Id"
											@bind-Value="@reparacion.InmuebleId" Change="@OnInmuebleChange"
											Placeholder="Seleccione un inmueble" Style="width:100%" />
							<ValidationMessage For="@(() => reparacion.InmuebleId)" />
						</div>

						<div class="col-md-6">
							<label class="form-label">Categoría *</label>
							<RadzenDropDown Data="@categorias" TextProperty="Categoria" ValueProperty="Id"
											@bind-Value="@selectedCategoriaId" Change="@OnCategoriaChange"
											Placeholder="Seleccione categoría" Style="width:100%" />
							<ValidationMessage For="@(() => reparacion.Categoria.Id)" />
						</div>
					</div>

					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label">Reparador / Contratista *</label>
							<RadzenDropDown Data="@empleados" TextProperty="Nombre" ValueProperty="EmpleadoId"
											@bind-Value="@reparacion.EmpleadoId" Placeholder="Seleccione reparador / contratista"
											Style="width:100%">
								<Template Context="empleado">
									@empleado.Nombre (@empleado.Especialidad.Especialidad) - @empleado.TipoEmpleado ⭐@(GetCalificacionPromedio(empleado.EmpleadoId))
								</Template>
							</RadzenDropDown>
						</div>
					</div>

					<div class="row mb-3">
						<div class="col-12">
							<label class="form-label">Descripción *</label>
							<RadzenTextArea @bind-Value="@reparacion.Descripcion" Style="width:100%" Rows="3" />
							<ValidationMessage For="@(() => reparacion.Descripcion)" />
						</div>
					</div>

					<div class="row mb-3">
						<div class="col-12">
							<label class="form-label">Nuevas Imágenes (Máximo 5)</label>
							<RadzenUpload @ref="uploadControl"
										  ChooseText="Adjuntar imágenes"
										  Multiple="true"
										  Accept="image/*"
										  MaxFileSize="5000000"
										  TotalFilesSize="25000000"
										  Style="width:100%"
										  Change="@OnFileUpload" />

							<ValidationMessage For="@(() => imagenesSeleccionadas)" />

							@if (imagenesSeleccionadas.Any())
							{
								<div class="d-flex flex-wrap gap-2 mt-3">
									@foreach (var img in imagenesSeleccionadas)
									{
										<div class="position-relative" style="width: 120px;">
											<img src="@img.Url"
												 alt="@img.Descripcion"
												 class="img-thumbnail w-100 h-auto"
												 style="height: 100px; object-fit: cover; cursor: pointer;"
												 @onclick="@(() => AbrirModal(img))" />

											<button type="button"
													class="position-absolute top-0 start-100 translate-middle btn btn-danger btn-sm rounded-circle p-0"
													style="width: 24px; height: 24px;"
													@onclick:stopPropagation="true"
													@onclick="@(() => RemoveImage(img.Id))">
												<i class="fas fa-times fs-10"></i>
											</button>

											<div class="text-truncate small mt-1" style="width: 100px;">@img.Descripcion</div>
										</div>

									}
								</div>
							}
						</div>
					</div>

					@if (imagenSeleccionada != null)
					{
						<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
							<div class="modal-dialog modal-lg" role="document">
								<div class="modal-content">
									<div class="modal-header">
										<h5 class="modal-title">@imagenSeleccionada.Descripcion</h5>
										<button type="button" class="btn-close" @onclick="CerrarModal"></button>
									</div>
									<div class="modal-body text-center">
										<img src="@imagenSeleccionada.Url" class="img-fluid" />
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-danger" @onclick="@(() => ConfirmarEliminar(imagenSeleccionada.Id))">
											<i class="fas fa-trash-alt"></i> Quitar imagen
										</button>
										<button type="button" class="btn btn-secondary" @onclick="CerrarModal">
											Cancelar
										</button>
									</div>
								</div>
							</div>
						</div>
					}
				};

}

