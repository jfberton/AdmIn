@page "/inmueble/reservar/{inmuebleId:int}"

@inherits BaseComponent

@using AdmIn.Business.Entidades
@using AdmIn.UI.Services.Mock
@using AdmIn.UI.Services
@using AdmIn.UI.Components.Pages.Mockup.ComponentesDialogos
@inject IInmuebleService InmuebleMockService // Renamed
@inject IContratoService ContratoMockService // Renamed
@inject IJSRuntime JS
@inject IWebHostEnvironment Env

@if (inmueble == null)
{
	<RadzenAlert Text="Cargando inmueble..." Style="margin: 20px;" />
}
else
{
	<RadzenCard>
		<Header>
			<h3>@inmueble.Descripcion</h3>
		</Header>
		<Content>
			<RadzenRow>
				<RadzenColumn Size="12">
					<p><strong>Dirección:</strong> @inmueble.Direccion.ToString()</p>
					<p><strong>Valor:</strong> @inmueble.Valor.ToString("C") </p>
					<p><strong>Superficie:</strong> @inmueble.Superficie m²</p>
					<p><strong>Construido:</strong> @inmueble.Construido m²</p>

				</RadzenColumn>
			</RadzenRow>
			<RadzenRow>
				<RadzenColumn Size="12">
					<RadzenFormField Text="Seleccionar persona:" Variant="Variant.Outlined" Style="width:100%">
						<PersonaSelector OnPersonaSelected="OnPersonaSeleccionada" Placeholder="Seleccionar persona para la reserva" />
					</RadzenFormField>
				</RadzenColumn>
			</RadzenRow>
			@if (personaSeleccionada != null)
			{
				<div class="row mt-4">
					<div class="col-md-4">
						<RadzenFormField Text="Cantidad de días de reserva" Variant="Variant.Outlined">
							<RadzenDropDown @bind-Value="DiasSeleccionados"
											Data="@opcionesDias"
											Name="diasDropdown"
											Placeholder="Seleccionar días"
											Style="width:100%;" />
						</RadzenFormField>
					</div>
					<div class="col-md-4">
						<RadzenFormField Text="Fecha límite de la reserva" Variant="Variant.Outlined">
							<RadzenTextBox Name="fechaFinalizacion"
										   Value="@(fechaFinalizacion.ToString("dd/MM/yyyy"))"
										   ReadOnly="true"
										   Style="width:100%;" />
						</RadzenFormField>
					</div>
					<div class="col-md-4">
						<RadzenFormField Text="Costo de la reserva" Variant="Variant.Outlined">
							<RadzenNumeric @bind-Value="costoReserva"
										   Name="montoReserva"
										   Placeholder="Ingresar monto"
										   Style="width:100%;" />
						</RadzenFormField>

					</div>
				</div>
				<div class="row mt-3">
					<div class="col-md-12 d-flex justify-content-end">
						<RadzenButton Text="Confirmar Reserva" Icon="check"
									  Style="margin-right: 10px;"
									  Click="ConfirmarReserva"
									  Disabled="@reservaConfirmada" />

						<RadzenButton Text="Cancelar" Icon="close" ButtonStyle="ButtonStyle.Secondary"
									  Click="@(() => personaSeleccionada = null)"
									  Disabled="@reservaConfirmada" />
					</div>
				</div>
			}
			@if (reservaGenerada != null)
			{
				<div class="row mt-4">
					<div class="col-md-12">
						<RadzenAlert Text="Reserva generada correctamente. Puedes descargar el comprobante." Style="margin-bottom:10px;" />
						<RadzenButton Text="Descargar PDF de Reserva" Icon="picture_as_pdf" Click="DescargarPdfReserva" />
					</div>
				</div>
			}
		</Content>
	</RadzenCard>


}

<script>
	function abrirPdfDesdeBase64(base64) {
		const byteCharacters = atob(base64);
		const byteNumbers = new Array(byteCharacters.length);
		for (let i = 0; i < byteCharacters.length; i++) {
			byteNumbers[i] = byteCharacters.charCodeAt(i);
		}
		const byteArray = new Uint8Array(byteNumbers);
		const blob = new Blob([byteArray], { type: 'application/pdf' });
		const url = URL.createObjectURL(blob);
		window.open(url, '_blank');
	}
</script>


@code {
	[Parameter] public int inmuebleId { get; set; }
	private Inmueble? inmueble;
	private PersonaBase? personaSeleccionada;
	private decimal costoReserva;
	private DateTime fechaFinalizacion = DateTime.Today.AddDays(7);
	private Reserva? reservaGenerada;
	private bool reservaConfirmada = false;


	private int diasSeleccionados = 30;
	private List<int> opcionesDias = Enumerable.Range(1, 6).Select(x => x * 5).ToList();

	private int DiasSeleccionados
	{
		get => diasSeleccionados;
		set
		{
			diasSeleccionados = value;
			fechaFinalizacion = DateTime.Today.AddDays(diasSeleccionados);
		}
	}



	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		base.EstablecerTituloPagina("Inmuebles", "Reservar");
		inmueble = await InmuebleMockService.ObtenerInmueblePorId(inmuebleId);
	}

	private void OnPersonaSeleccionada(PersonaBase persona)
	{
		personaSeleccionada = persona;
	}

	private async Task ConfirmarReserva()
	{
		if (inmueble == null || personaSeleccionada == null || costoReserva <= 0 || fechaFinalizacion <= DateTime.Today)
		{
			base.MostrarNotificacion(Radzen.NotificationSeverity.Warning, "Datos incompletos", "Completa todos los campos para confirmar la reserva.");
			return;
		}

		var reserva = new Reserva
			{
				Persona = personaSeleccionada,
				Inmueble = inmueble,
				CostoReserva = costoReserva,
				FechaFinalizacion = fechaFinalizacion
			};

		reservaGenerada = await ContratoMockService.GuardarReservaAsync(reserva);
		reservaConfirmada = true;

		base.MostrarNotificacion(Radzen.NotificationSeverity.Success, "Reserva confirmada", "La reserva se ha registrado correctamente.");
	}


	private async Task DescargarPdfReserva()
	{
		if (reservaGenerada is null)
		{
			base.MostrarNotificacion(Radzen.NotificationSeverity.Warning, "Sin reserva", "Primero debe generar una reserva.");
			return;
		}

		var reportes = new Reportes(Env);
		var pdfBytes = await reportes.GenerarPDFReserva(reservaGenerada);
		var base64 = Convert.ToBase64String(pdfBytes);

		await JS.InvokeVoidAsync("abrirPdfDesdeBase64", base64);
	}
}
