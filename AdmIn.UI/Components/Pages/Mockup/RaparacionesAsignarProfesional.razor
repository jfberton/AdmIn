@page "/m/reparaciones/asignar/{ReparacionId}"
@using AdmIn.Business.Entidades
@using AdmIn.UI.Services
@using System.ComponentModel.DataAnnotations

@inject IServ_Mock ServicioReparaciones
@inject IServ_Mock EmpleadoService
@inherits BaseComponent

<AuthorizeView Roles="edit_reparacion">
    <Authorized>
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Asignar Profesional</h5>
                <button class="btn btn-secondary" @onclick="VolverADetalle">
                    <i class="fas fa-arrow-left"></i> Volver
                </button>
            </div>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="@AsignarProfesional">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Profesional *</label>
                            <RadzenDropDown Data="@empleados" TextProperty="Nombre" ValueProperty="EmpleadoId" 
                                           @bind-Value="@model.EmpleadoId" Change="@OnEmpleadoChange" 
                                           Placeholder="Seleccione un profesional" Style="width:100%">
                                <Template Context="empleado">
                                    @empleado.Nombre (@empleado.Especialidad.Especialidad) ⭐@(GetCalificacionPromedio(empleado.EmpleadoId))
                                </Template>
                            </RadzenDropDown>
                            <ValidationMessage For="@(() => model.EmpleadoId)" />
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Costo Estimado *</label>
                            <RadzenNumeric TValue="decimal" @bind-Value="@model.CostoEstimado" Style="width:100%" 
                                          Format="C" />
                            <ValidationMessage For="@(() => model.CostoEstimado)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Fecha Estimada de Inicio *</label>
                            <RadzenDatePicker @bind-Value="@model.FechaInicio" Style="width:100%" />
                            <ValidationMessage For="@(() => model.FechaInicio)" />
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label class="form-label">Notas (opcional)</label>
                            <RadzenTextArea @bind-Value="@model.Notas" Style="width:100%" Rows="3" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12 text-end">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-user-plus"></i> Asignar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="VolverADetalle">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int ReparacionId { get; set; }
    
    private Reparacion? reparacion;
    private IEnumerable<Empleado> empleados = new List<Empleado>();
    private Dictionary<int, double> calificacionesEmpleados = new Dictionary<int, double>();
    
    private AsignacionModel model = new AsignacionModel();

    protected override async Task OnInitializedAsync()
    {
        EstablecerTituloPagina("Asignar Profesional");
        reparacion = await ServicioReparaciones.ObtenerReparacionPorId(ReparacionId);
        empleados = await EmpleadoService.ObtenerEmpleados();
        
        // Cargar calificaciones de empleados
        foreach (var empleado in empleados)
        {
            var calificaciones = await ServicioReparaciones.ObtenerCalificacionesEmpleado(empleado.EmpleadoId);
            if (calificaciones.Any())
            {
                calificacionesEmpleados[empleado.EmpleadoId] = calificaciones.Average(c => (c.CalificacionTrabajo + c.CalificacionComportamiento) / 2);
            }
            else
            {
                calificacionesEmpleados[empleado.EmpleadoId] = 0;
            }
        }
    }

    private double GetCalificacionPromedio(int empleadoId)
    {
        return calificacionesEmpleados.ContainsKey(empleadoId) ? calificacionesEmpleados[empleadoId] : 0;
    }

    private async Task OnEmpleadoChange(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int empleadoId))
        {
            model.EmpleadoId = empleadoId;
        }
    }

    private async Task AsignarProfesional()
    {
        try
        {
            var success = await ServicioReparaciones.AceptarReparacion(
                ReparacionId, 
                model.EmpleadoId, 
                model.CostoEstimado, 
                model.FechaInicio);
                
            if (success)
            {
                MostrarNotificacion(NotificationSeverity.Success, "Éxito", "Profesional asignado correctamente");
                VolverADetalle();
            }
            else
            {
                MostrarNotificacion(NotificationSeverity.Error, "Error", "No se pudo asignar el profesional");
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion(NotificationSeverity.Error, "Error", $"No se pudo asignar el profesional: {ex.Message}");
            await LogHelper.Error($"Error al asignar profesional: {ex.Message}. Detalles {ex}");
        }
    }

    private void VolverADetalle()
    {
        IrA($"/m/reparaciones/detalle/{ReparacionId}");
    }

    private class AsignacionModel
    {
        [Required(ErrorMessage = "Seleccione un profesional")]
        public int EmpleadoId { get; set; }
        
        [Required(ErrorMessage = "Ingrese un costo estimado")]
        [Range(0.01, double.MaxValue, ErrorMessage = "El costo debe ser mayor a cero")]
        public decimal CostoEstimado { get; set; }
        
        [Required(ErrorMessage = "Seleccione una fecha de inicio")]
        public DateTime FechaInicio { get; set; } = DateTime.Now;
        
        public string? Notas { get; set; }
    }
}