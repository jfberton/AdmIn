@page "/m/inmuebles"

@using Radzen.Blazor
@using AdmIn.Business.Entidades
@using AdmIn.UI.Components.Pages.Mockup.ComponentesDialogos
@using AdmIn.UI.Services.Mock
@using AdmIn.UI.Services.UtilityServices
@inject IInmuebleService InmuebleMockService

@inherits BaseComponent

<div class="inmueble-admin-page">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="var(--spacing-md)" class="action-bar rz-mb-4" Wrap="FlexWrap.Wrap">
        <RadzenButton Text="Agregar Inmueble" Icon="add_home" Click="@(() => IrA("/agregar-inmueble"))" />

        <div class="filter-tabs-container">
            <button class="filter-tab @GetFilterTabClass(null)" @onclick="() => FiltrarInmuebles(null)">Todos</button>
            <button class="filter-tab @GetFilterTabClass("Disponible")" @onclick="@(() => FiltrarInmuebles("Disponible"))">Disponible</button>
            <button class="filter-tab @GetFilterTabClass("Reservado")" @onclick="@(() => FiltrarInmuebles("Reservado"))">Reservado</button>
            <button class="filter-tab @GetFilterTabClass("Ocupado")" @onclick="@(() => FiltrarInmuebles("Ocupado"))">Ocupado</button>
            <button class="filter-tab @GetFilterTabClass("En reparación")" @onclick="@(() => FiltrarInmuebles("En reparación"))">En reparación</button>
        </div>
    </RadzenStack>

    <RadzenRow class="inmueble-grid">
        @if (InmueblesFiltrados != null && InmueblesFiltrados.Any())
        {
            @foreach (var inmueble in InmueblesFiltrados)
            {
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4" SizeXL="3">
                    <InmuebleCard Inmueble="inmueble" OnVerDetalle="VerDetalleInmueble" />
                </RadzenColumn>
            }
        }
        else
        {
            <RadzenColumn Size="12">
                <RadzenCard class="no-properties-card">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="var(--spacing-md)">
                        <RadzenIcon Icon="info" Style="font-size: 3rem; color: var(--neutral-400);" />
                        <RadzenText TextStyle="TextStyle.H6" class="text-center">
                            No se encontraron inmuebles para este filtro.
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="text-center">
                            Intenta ajustar tus criterios de búsqueda o agrega nuevas propiedades.
                        </RadzenText>
                        <RadzenButton Text="Volver a Todos los Inmuebles" Icon="refresh" Click="@(() => FiltrarInmuebles(null))" ButtonStyle="ButtonStyle.Secondary" />
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        }
    </RadzenRow>
</div>

@code {
    private IEnumerable<Inmueble>? Inmuebles; // Hacer nullable para mejor práctica
    private IEnumerable<Inmueble>? InmueblesFiltrados; // Hacer nullable
    private string? activeFilterEstado = null; // Track active filter

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        base.EstablecerTituloPagina("Inmuebles", "Listado");

        var result = await InmuebleMockService.ObtenerInmuebles();
        Inmuebles = result; // Asigna directamente el resultado
        InmueblesFiltrados = Inmuebles; // Mostrar todos al inicio
    }

    private void FiltrarInmuebles(string? estado)
    {
        activeFilterEstado = estado; // Set the active filter
        if (string.IsNullOrEmpty(estado))
        {
            InmueblesFiltrados = Inmuebles; // Mostrar todos
        }
        else
        {
            InmueblesFiltrados = Inmuebles?.Where(i => i.Estado?.Estado == estado); // Usar operador ?. para seguridad
        }
        StateHasChanged(); // Forzar la actualización de la UI
    }

    private void VerDetalleInmueble(int inmuebleId)
    {
        IrA($"/inmueble/{inmuebleId}");
    }

    // Nuevo método para la clase de las pestañas
    private string GetFilterTabClass(string? filterType)
    {
        var baseClass = ""; // No necesita una clase base para el estilo del cursor, ya lo manejaremos globalmente para botones
        if (filterType == null && activeFilterEstado == null)
        {
            return "active-tab";
        }
        if (activeFilterEstado == filterType && filterType != null)
        {
            return "active-tab";
        }
        return baseClass;
    }
}