@page "/m/inmuebles"
@using Radzen.Blazor
@using AdmIn.Business.Entidades
@using AdmIn.UI.Components.Pages.Mockup.ComponentesDialogos
@using AdmIn.UI.Services.Mock
@using AdmIn.UI.Services.UtilityServices
@inject IInmuebleService InmuebleMockService // Renamed from IMockInmuebleService

@inherits BaseComponent

<div class="inmueble-admin-page">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" class="action-bar">
                <RadzenButton Text="Agregar Inmueble" Icon="add" Click="@(() => IrA("/agregar-inmueble"))" />
                <RadzenBadge Text="Todos" BadgeStyle="BadgeStyle.Primary" class="@GetFilterBadgeClass(null)" @onclick="() => FiltrarInmuebles(null)" />
                <RadzenBadge Text="Disponible" BadgeStyle="BadgeStyle.Success" class="@GetFilterBadgeClass("Disponible")" @onclick="@(() => FiltrarInmuebles("Disponible"))" />
                <RadzenBadge Text="Reservado" BadgeStyle="BadgeStyle.Info" class="@GetFilterBadgeClass("Reservado")" @onclick="@(() => FiltrarInmuebles("Reservado"))" />
                <RadzenBadge Text="Ocupado" BadgeStyle="BadgeStyle.Dark" class="@GetFilterBadgeClass("Ocupado")" @onclick="@(() => FiltrarInmuebles("Ocupado"))" />
                <RadzenBadge Text="En reparación" BadgeStyle="BadgeStyle.Warning" class="@GetFilterBadgeClass("En reparación")" @onclick="@(() => FiltrarInmuebles("En reparación"))" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="inmueble-grid">
        @if (InmueblesFiltrados != null)
        {
            @foreach (var inmueble in InmueblesFiltrados)
            {
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4" SizeXL="3" Style="display: flex; justify-content: center;">
                    <InmuebleCard Inmueble="inmueble" OnVerDetalle="VerDetalleInmueble" />
                </RadzenColumn>
            }
        }
    </RadzenRow>
</div>

@code {
    private IEnumerable<Inmueble> Inmuebles;
    private IEnumerable<Inmueble> InmueblesFiltrados;
    private string? activeFilterEstado = null; // Track active filter

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        base.EstablecerTituloPagina("Inmuebles", "Listado");

        Inmuebles = await InmuebleMockService.ObtenerInmuebles();
        InmueblesFiltrados = Inmuebles; // Mostrar todos al inicio
    }

    private void FiltrarInmuebles(string? estado)
    {
        activeFilterEstado = estado; // Set the active filter
        if (string.IsNullOrEmpty(estado))
        {
            InmueblesFiltrados = Inmuebles; // Mostrar todos
        }
        else
        {
            InmueblesFiltrados = Inmuebles.Where(i => i.Estado.Estado == estado);
        }
    }

    private void VerDetalleInmueble(int inmuebleId)
    {
        IrA($"/inmueble/{inmuebleId}");
    }

    private string GetFilterBadgeClass(string? filterType)
    {
        var baseClass = "filter-badge";
        // Special handling for "Todos" which corresponds to null filterEstado
        if (filterType == null && activeFilterEstado == null)
        {
            return $"{baseClass} active-filter";
        }
        // For other specific states
        if (activeFilterEstado == filterType && filterType != null)
        {
            return $"{baseClass} active-filter";
        }
        return baseClass;
    }
}
