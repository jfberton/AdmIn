@using AdmIn.Business.Entidades
@using Radzen.Blazor

<RadzenCard Style="cursor: pointer; margin: 10px; width: 300px;" @onclick="@(() => VerDetalle(Inmueble.Id))">
    <Header>
        <!-- Mostrar la imagen principal del inmueble -->
        @if (Inmueble.ImagenPrincipal != null)
        {
            <img src="@Inmueble.ImagenPrincipal.Url" style="width: 100%; height: 200px; object-fit: cover;" />
        }
        else
        {
            <div style="width: 100%; height: 200px; background-color: #f0f0f0; display: flex; align-items: center; justify-content: center;">
                <span>Sin imagen</span>
            </div>
        }
    </Header>
    <Content>
        <div style="padding: 10px;">
            <h4 style="margin: 0;">Inmueble #@Inmueble.Id.ToString()</h4>
            <p style="color: #666; margin: 5px 0;"><b>@Inmueble.Descripcion</b></p>
            <p style="color: #666; margin: 5px 0;">@Inmueble.Direccion.ToString()</p>
            
            <RadzenBadge Text="@Inmueble.Estado.Estado"
                         BadgeStyle="@GetBadgeColor(Inmueble.Estado.Estado)"
                         Style="margin-bottom: 10px;" />
            
            <p style="font-size: 1.2em; font-weight: bold; color: #2c3e50;">@Inmueble.Valor.ToString("C")</p>
        </div>
    </Content>
</RadzenCard>

@code {
    [Parameter]
    public Inmueble Inmueble { get; set; }

    [Parameter]
    public EventCallback<int> OnVerDetalle { get; set; }

    private async Task VerDetalle(int inmuebleId)
    {
        await OnVerDetalle.InvokeAsync(inmuebleId);
    }

    private BadgeStyle GetBadgeColor(string estado)
    {
        return estado switch
        {
            "Disponible" => BadgeStyle.Success, // Verde
            "Ocupado" => BadgeStyle.Dark, // Gris
            "En reparación" => BadgeStyle.Warning, // Amarillo
            _ => BadgeStyle.Light
        };
    }
}