@using AdmIn.Business.Entidades
@using Radzen.Blazor

<RadzenCard class="inmueble-card" @onclick="@(() => VerDetalle(Inmueble.Id))">
    <Header>
        <!-- Mostrar la imagen principal del inmueble -->
        @if (Inmueble.ImagenPrincipal != null)
        {
            <img src="@Inmueble.ImagenPrincipal.Url" class="inmueble-card-image" />
        }
        else
        {
            <div class="inmueble-card-image-placeholder">
                <span>Sin imagen</span>
            </div>
        }
    </Header>
    <Content>
        <div class="inmueble-card-content">
            <h4 class="inmueble-card-title">Inmueble #@Inmueble.Id.ToString()</h4>
            <p class="inmueble-card-description"><b>@Inmueble.Descripcion</b></p>
            <p class="inmueble-card-description">@Inmueble.Direccion.ToString()</p>
            
            <RadzenBadge Text="@Inmueble.Estado.Estado"
                         BadgeStyle="@GetBadgeColor(Inmueble.Estado.Estado)"
                         class="inmueble-card-status-badge" />
            
            <p class="inmueble-card-price">@Inmueble.Valor.ToString("C")</p>
        </div>
    </Content>
</RadzenCard>

@code {
    [Parameter]
    public Inmueble Inmueble { get; set; }

    [Parameter]
    public EventCallback<int> OnVerDetalle { get; set; }

    private async Task VerDetalle(int inmuebleId)
    {
        await OnVerDetalle.InvokeAsync(inmuebleId);
    }

    private BadgeStyle GetBadgeColor(string estado)
    {
        return estado switch
        {
            "Disponible" => BadgeStyle.Success, // Verde
            "Ocupado" => BadgeStyle.Dark, // Gris
			"Reservado" => BadgeStyle.Info, // Azul"
            "En reparación" => BadgeStyle.Warning, // Amarillo
            _ => BadgeStyle.Light
        };
    }
}