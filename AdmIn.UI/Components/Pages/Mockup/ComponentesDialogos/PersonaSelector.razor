@using AdmIn.Business.Entidades
@using AdmIn.UI.Services
@inject IServ_Mock PersonaService

<div class="persona-selector" style="position:relative;">
    <RadzenTextBox @onclick="ToggleDropdown"
                   Value="@displayValue"
                   Placeholder="@Placeholder"
                   ReadOnly="true"
                   Style="width:100%; cursor:pointer; background-color:#f8f9fa;" />

    @if (mostrarDropdown)
    {
        <div class="persona-dropdown">
            @if (!mostrarFormularioNuevaPersona)
            {
                <div class="row mb-3">
                    <div class="col-md-12">
                        <RadzenTextBox @bind-Value="filtroGlobal" Placeholder="Buscar en todas las columnas..." Style="width:100%" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 d-flex justify-content-between">
                        <button class="btn btn-success" @onclick="MostrarFormularioNuevaPersona">
                            <i class="fas fa-plus"></i> Agregar Persona
                        </button>
                        <button class="btn btn-secondary" @onclick="CerrarDropdown">
                            <i class="fas fa-times"></i> Cerrar
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenDataGrid Data="@personas" TItem="PersonaBase"
                                        AllowFiltering="true" AllowColumnResize="true"
                                        FilterMode="FilterMode.Simple" AllowSorting="true"
                                        PageSize="5" AllowPaging="true"
                                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                        LogicalFilterOperator="LogicalFilterOperator.Or"
                                        RowSelect="@SeleccionarPersona" @bind-Value="@personasSeleccionadas">
                            <Columns>
                                <RadzenDataGridColumn TItem="PersonaBase" Property="Nombre" Title="Nombre" Width="160px" />
                                <RadzenDataGridColumn TItem="PersonaBase" Property="ApellidoPaterno" Title="Apellido Paterno" Width="160px" />
                                <RadzenDataGridColumn TItem="PersonaBase" Property="ApellidoMaterno" Title="Apellido Materno" Width="160px" />
                                <RadzenDataGridColumn TItem="PersonaBase" Property="Rfc" Title="RFC" Width="140px" />
                                <RadzenDataGridColumn TItem="PersonaBase" Property="Email" Title="Email" Width="200px" />
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            }
            else
            {
                <div class="mt-3 p-3 border rounded bg-light">
                    <h5>Nueva Persona</h5>
                    @if (!string.IsNullOrEmpty(mensajeError))
                    {
                        <div class="alert alert-danger">@mensajeError</div>
                    }
                    <EditForm Model="@nuevaPersona" OnValidSubmit="CrearPersona">
                        <InputText @bind-Value="nuevaPersona.Nombre" class="form-control mb-2" placeholder="Nombre" required />
                        <InputText @bind-Value="nuevaPersona.ApellidoPaterno" class="form-control mb-2" placeholder="Apellido Paterno" required />
                        <InputText @bind-Value="nuevaPersona.ApellidoMaterno" class="form-control mb-2" placeholder="Apellido Materno" required />
                        <InputText @bind-Value="nuevaPersona.Rfc" class="form-control mb-2" placeholder="RFC" required />
                        <InputText @bind-Value="nuevaPersona.Email" class="form-control mb-2" placeholder="Email" required />
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-save"></i> Crear
                            </button>
                            <button class="btn btn-secondary ms-2" type="button" @onclick="CancelarAgregarPersona">
                                <i class="fas fa-ban"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    }
</div>

<style>
    .persona-dropdown {
        position: absolute;
        left: 0;
        right: 0;
        z-index: 1000;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 16px rgba(0,0,0,0.12);
        padding: 18px 18px 12px 18px;
        margin-top: 2px;
        min-width: 350px;
        max-width: 100vw;
    }
</style>

@code {
    [Parameter] public EventCallback<PersonaBase> OnPersonaSelected { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Seleccionar persona";
    [Parameter] public string Titulo { get; set; } = "Buscar o crear persona";
    [Parameter]
    public PersonaBase? PersonaSeleccionada
    {
        get => personaSeleccionada;
        set
        {
            if (personaSeleccionada != value)
            {
                personaSeleccionada = value;
                StateHasChanged();
            }
        }
    }


    private List<PersonaBase> personas = new();
    private IList<PersonaBase> personasSeleccionadas = new List<PersonaBase>();
    private string filtroGlobal = string.Empty;
    private bool mostrarFormularioNuevaPersona = false;
    private PersonaBase nuevaPersona = new();
    private bool mostrarDropdown = false;
    private PersonaBase? personaSeleccionada;
    private string? mensajeError;

    private string displayValue => personaSeleccionada != null
        ? $"({personaSeleccionada.Rfc}) {personaSeleccionada.Nombre} {personaSeleccionada.ApellidoPaterno} {personaSeleccionada.ApellidoMaterno}"
        : Placeholder;

    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    private async Task CargarPersonas()
    {
        personas = await PersonaService.BuscarPersonasAsync("", "");
    }

    private void ToggleDropdown()
    {
        mostrarDropdown = !mostrarDropdown;
        if (mostrarDropdown)
        {
            filtroGlobal = string.Empty;
        }
    }

    private void CerrarDropdown()
    {
        mostrarDropdown = false;
        mostrarFormularioNuevaPersona = false;
    }

    private async Task SeleccionarPersona(PersonaBase persona)
    {
        personaSeleccionada = persona;
        mostrarDropdown = false;
        mostrarFormularioNuevaPersona = false;
        if (OnPersonaSelected.HasDelegate)
            await OnPersonaSelected.InvokeAsync(persona);
    }

    private void MostrarFormularioNuevaPersona()
    {
        nuevaPersona = new PersonaBase();
        mostrarFormularioNuevaPersona = true;
    }

    private void CancelarAgregarPersona()
    {
        mostrarFormularioNuevaPersona = false;
    }

    private async Task CrearPersona()
    {
        if (string.IsNullOrWhiteSpace(nuevaPersona.Nombre) ||
            string.IsNullOrWhiteSpace(nuevaPersona.ApellidoPaterno) ||
            string.IsNullOrWhiteSpace(nuevaPersona.ApellidoMaterno) ||
            string.IsNullOrWhiteSpace(nuevaPersona.Rfc) ||
            string.IsNullOrWhiteSpace(nuevaPersona.Email))
        {
            mensajeError = "Todos los campos son requeridos.";
            StateHasChanged();
            return;
        }

        mensajeError = null;
        var personaCreada = await PersonaService.CrearPersonaAsync(nuevaPersona);

        // Actualizar la lista local
        personas.Add(personaCreada);

        personaSeleccionada = personaCreada;
        personasSeleccionadas = new List<PersonaBase> { personaCreada };
        mostrarFormularioNuevaPersona = false;
        mostrarDropdown = false;

        if (OnPersonaSelected.HasDelegate)
            await OnPersonaSelected.InvokeAsync(personaCreada);
    }
}