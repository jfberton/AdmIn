@page "/editar-inmueble/{inmuebleId:int}"

@inherits BaseComponent

@using Radzen.Blazor
@using AdmIn.Business.Entidades
@using AdmIn.UI.Components.Pages.Mockup.ComponentesDialogos
@using AdmIn.UI.Services

@inject IServ_Mock MockData
@inject DialogService DialogService

<h3>Editar Inmueble</h3>

@if (inmueble == null)
{
    <RadzenAlert Text="Cargando..." Style="margin: 20px;" />
}
else
{
    <div style="margin-bottom: 20px;">
        <RadzenButton Text="Volver" Icon="arrow_back" Click="@Volver" Style="margin-right: 10px;" />
    </div>
    <EditForm Model="@inmueble">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Información del Inmueble (solo lectura) -->
        <RadzenFieldset Text="Información del Inmueble">
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                    <RadzenFormField Text="Descripción" Variant="Variant.Text" Style="width: 100%;">
                        <RadzenTextBox @bind-Value="inmueble.Descripcion" ReadOnly="true" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                    <RadzenFormField Text="Dirección" Variant="Variant.Text" Style="width: 100%;">
                        <RadzenTextBox @bind-Value="inmueble.Direccion.CalleNumero" ReadOnly="true" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                    <RadzenFormField Text="Valor" Variant="Variant.Text" Style="width: 100%;">
                        <RadzenNumeric @bind-Value="inmueble.Valor" ReadOnly="true" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                    <RadzenFormField Text="Superficie" Variant="Variant.Text" Style="width: 100%;">
                        <RadzenNumeric @bind-Value="inmueble.Superficie" ReadOnly="true" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                    <RadzenFormField Text="Construido" Variant="Variant.Text" Style="width: 100%;">
                        <RadzenNumeric @bind-Value="inmueble.Construido" ReadOnly="true" />
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            <RadzenButton Text="Editar Información" Icon="edit" Click="@EditarInformacion" Style="margin-top: 10px;" />
        </RadzenFieldset>

        <!-- Características del Inmueble -->
        <RadzenFieldset Text="Características del Inmueble">
            <RadzenDataGrid Data="@inmueble.Caracteristicas" TItem="CaracteristicaInmueble">
                <Columns>
                    <RadzenDataGridColumn TItem="CaracteristicaInmueble" Property="Nombre" Title="Nombre" />
                    <RadzenDataGridColumn TItem="CaracteristicaInmueble" Property="Valor" Title="Valor" />
                    <RadzenDataGridColumn TItem="CaracteristicaInmueble">
                        <Template Context="caracteristica">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="@(() => EditarCaracteristica(caracteristica))" Style="margin-right: 5px;" />
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await EliminarCaracteristica(caracteristica.Id))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenButton Text="Agregar Característica" Icon="add" Click="@AgregarCaracteristica" Style="margin-top: 10px;" />
        </RadzenFieldset>

        <!-- Imágenes del Inmueble -->
        <RadzenFieldset Text="Imágenes del Inmueble">
            <RadzenDataGrid Data="@inmueble.Imagenes" TItem="Imagen">
                <Columns>
                    <RadzenDataGridColumn TItem="Imagen" Property="Descripcion" Title="Descripción" />
                    <RadzenDataGridColumn TItem="Imagen" Title="Imagen">
                        <Template Context="imagen">
                            <RadzenImage Path="@imagen.Url"
                            Style="width: 100px; height: auto; border-radius: 4px;"
                            Class="@(imagen.Id == inmueble.ImagenPrincipalId ? "imagen-principal" : "")" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Imagen">
                        <Template Context="imagen">
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await EliminarImagen(imagen.Id))" Style="margin-right: 5px;" />
                            <RadzenButton Icon="@(imagen.Id == inmueble.ImagenPrincipalId ? "hotel_class" : "star")"
                            ButtonStyle="ButtonStyle.Primary"
                            Click="@(async () => await EstablecerImagenPrincipal(imagen.Id))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenButton Text="Agregar Imagen" Icon="add" Click="@AgregarImagen" Style="margin-top: 10px;" />
        </RadzenFieldset>
    </EditForm>
}

<style>
    .imagen-principal {
    border: 3px solid #ffc107; /* Borde amarillo */
    box-shadow: 0 0 10px rgba(255, 193, 7, 0.5); /* Sombra */
    }
</style>

@code {
    [Parameter]
    public int InmuebleId { get; set; }

    private Inmueble? inmueble;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        base.EstablecerTituloPagina("Inmuebles", $"Editar inmueble # {InmuebleId.ToString()}");

        await ObtenerInmueble();
    }

    private async Task ObtenerInmueble()
    {
        inmueble = await MockData.ObtenerInmueblePorId(InmuebleId);
        inmueble.Caracteristicas = inmueble.Caracteristicas.ToList();
        inmueble.Imagenes = inmueble.Imagenes.ToList();
        StateHasChanged();
    }

    private async Task EditarInformacion()
    {
        await DialogService.OpenAsync<EditarInformacionInmueble>("Editar Información del Inmueble",
            new Dictionary<string, object> { { "Inmueble", inmueble } },
            new DialogOptions { Width = "600px", Height = "auto" });

        await ObtenerInmueble();
    }

    private async Task AgregarCaracteristica()
    {
        var nuevaCaracteristica = new CaracteristicaInmueble();
        await DialogService.OpenAsync<AgregarCaracteristicaDialog>("Agregar Característica",
            new Dictionary<string, object> { { "Caracteristica", nuevaCaracteristica } },
            new DialogOptions { Width = "500px", Height = "auto" });

        if (!string.IsNullOrEmpty(nuevaCaracteristica.Nombre))
        {
            await MockData.AgregarCaracteristica(inmueble.Id, nuevaCaracteristica);
        }

        await ObtenerInmueble();
    }

    private async Task EditarCaracteristica(CaracteristicaInmueble caracteristica)
    {
        var copiaCaracteristica = new CaracteristicaInmueble
            {
                Id = caracteristica.Id,
                Nombre = caracteristica.Nombre,
                Valor = caracteristica.Valor
            };

        await DialogService.OpenAsync<AgregarCaracteristicaDialog>("Editar Característica",
            new Dictionary<string, object> { { "Caracteristica", copiaCaracteristica } },
            new DialogOptions { Width = "500px", Height = "auto" });

        if (!string.IsNullOrEmpty(copiaCaracteristica.Nombre))
        {
            await MockData.ActualizarCaracteristica(inmueble.Id, copiaCaracteristica);
        }

        await ObtenerInmueble();
    }

    private async Task EliminarCaracteristica(int caracteristicaId)
    {
        await MockData.EliminarCaracteristica(inmueble.Id, caracteristicaId);

        await ObtenerInmueble();
    }

    private async Task AgregarImagen()
    {
        var nuevaImagen = new Imagen();
        await DialogService.OpenAsync<AgregarImagenDialog>("Agregar Imagen",
            new Dictionary<string, object> { { "Imagen", nuevaImagen } },
            new DialogOptions { Width = "500px", Height = "auto" });

        if (!string.IsNullOrEmpty(nuevaImagen.Url))
        {
            await MockData.AgregarImagen(inmueble.Id, nuevaImagen);
        }

        await ObtenerInmueble();
    }

    private async Task EliminarImagen(Guid imagenId)
    {
        await MockData.EliminarImagen(inmueble.Id, imagenId);

        inmueble = await MockData.ObtenerInmueblePorId(InmuebleId);
    }

    private async Task EstablecerImagenPrincipal(Guid imagenId)
    {
        await MockData.EstablecerImagenPrincipal(inmueble.Id, imagenId);
        await ObtenerInmueble();
    }

    private void Volver()
    {
        IrA("m/inmuebles");
    }

}