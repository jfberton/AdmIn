@page "/"

@using AdmIn.Business.Entidades
@using AdmIn.Business.Utilidades
@using AdmIn.UI.Components.Layout
@using AdmIn.UI.Services
@using AdmIn.UI.Services.Mock
@using AdmIn.UI.Services.UtilityServices
@using AdmIn.UI.Authentication
@using Microsoft.AspNetCore.Components.Authorization

@layout LoginLayout
@inject AuthenticationStateProvider authStateProvider
@inject ITokenService TokenService
@inject NavigationManager navManager
@inject IServ_Auth serv_Auth
@inject DialogService dialogService
@inject DeviceService DeviceService
@inject IServiceProvider ServiceProvider


@if (DeviceService.IsMobileDevice())
{
    <RadzenRow Gap="0" Class="rz-mx-auto login-container-row-mobile">
        <RadzenColumn Size="12">
            <RadzenCard Class="rz-shadow-0 rz-border-radius-0 login-form-card">
                <img src="img/AdmIn.png" alt="AdmIn Logo" class="login-logo" />
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6 login-title">
                    Ingrese sus credenciales
                </RadzenText>
                <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
                    <RadzenLogin AllowRegister="false" AllowResetPassword="false" UserText="Usuario" PasswordText="Contraseña"
                    AllowRememberMe="false" RememberMe="false" LoginText="Ingresar"
                    Login=@(args => OnLogin(args, "Login with default values")) />
                </RadzenTemplateForm>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
}
else
{
    <RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto login-container-row-desktop" JustifyContent="JustifyContent.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Class="rz-shadow-0 rz-border-radius-0 login-form-card">
                <img src="img/AdmIn.png" alt="AdmIn Logo" class="login-logo" />
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6 login-title">
                    Ingrese sus credenciales
                </RadzenText>
                <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
                    <RadzenLogin AllowRegister="false" AllowResetPassword="false" UserText="Usuario" PasswordText="Contraseña"
                    AllowRememberMe="false" RememberMe="false" LoginText="Ingresar"
                    Login=@(args => OnLogin(args, "Login with default values")) />
                </RadzenTemplateForm>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
}


@code {
    async Task OnLogin(LoginArgs args, string name)
    {

        var model = new LoginModel
            {
                Email = args.Username,
                Password = args.Password
            };


        Usuario user = null;

        switch (args.Username)
        {
            case "propietario":
                user = new Usuario()
                    {
                        Nombre = "Propietario",
                        Email = "propietario@mock.com",
                        Roles = new List<Rol> { new Rol { Nombre = "MockPropietario", Permisos = new List<Permiso> { new Permiso { Nombre = "propietario" } } } },
                        Token = "mock token",
                        Password = "123456",
                        Activo = true,
                        Creacion = DateTime.Now
                    };
                break;
            default:
                user = await serv_Auth.Login(model);
                break;
        }

        if (user == null)
        {
            await dialogService.Alert("Usuario o contraseña incorrecta", "Credenciales inválidas");
            return;
        }

        // Setear el token usando el servicio
        await TokenService.SetTokenAsync(user.Token);

        var customAuthStateProvider = authStateProvider as CustomAuthenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Nombre = user.Nombre,
                Email = user.Email,
                Roles = user.PermisoString,
                Token = user.Token,
                Password = model.Password
            });

        // Inicializar servicios Mock usando el provider inyectado
        AdmIn.UI.Services.Mock.MockDataInitializer.InicializarDatosMock(ServiceProvider);

        //Redirigir a la página de inicio
        navManager.NavigateTo("/home", true);

    }

    void OnRegister(string name)
    {

    }

    void OnResetPassword(string value, string name)
    {

    }

    async Task Authenticate()
    {

    }

}
