@using AdmIn.Business.Entidades
@using AdmIn.UI.Authentication
@using AdmIn.UI.Services;
@using AdmIn.UI.Services.UtilityServices;
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen

@inherits LayoutComponentBase

@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject IServ_Usuario serv_Usuario;
@inject DialogService dialogService
@inject NotificationService notificationService
@inject IJSRuntime JS
@inject DeviceService DeviceService
@inject PageTitleService PageTitleService

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />
<RadzenComponents />

<RadzenComponents @rendermode="InteractiveServer" />

<RadzenLayout>
    @if (DeviceService.IsMobileDevice())
    {
        <RadzenHeader>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <div class="header-content">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                            <RadzenImage class="header-logo"
                                         Path="@GetLogoPath()"
                                         Style="max-height: 40px; max-width: 120px; height: 40px; width: auto; object-fit: contain;" />
                        </RadzenStack>
                        <div class="header-title">
                            <strong>@PageTitleService.Titulo</strong>
                            @if (!string.IsNullOrEmpty(PageTitleService.Subtitulo))
                            {
                                <span>&nbsp;- @PageTitleService.Subtitulo</span>
                            }
                        </div>
                    </div>
                </RadzenColumn>
            </RadzenRow>
        </RadzenHeader>
    }
    else
    {
        <RadzenHeader>
            <RadzenRow>
                <RadzenColumn Size="11">
                    <div class="header-content">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                            <RadzenImage class="header-logo"
                                         Path="@GetLogoPath()"
                                         Style="max-height: 35px; max-width: 100px; height: 35px; width: auto; object-fit: contain;" />
                        </RadzenStack>
                        <div class="header-title">
                            <strong>@PageTitleService.Titulo</strong>
                            @if (!string.IsNullOrEmpty(PageTitleService.Subtitulo))
                            {
                                <span>&nbsp;- @PageTitleService.Subtitulo</span>
                            }
                        </div>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <AuthorizeView>
                        <Authorized>
                            <RadzenProfileMenu>
                                <Template>
                                    <RadzenImage class="rz-gravatar" Path="img/usuario.png"></RadzenImage>
                                </Template>
                                <ChildContent>
                                    <RadzenStack Gap="0" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" class="rz-p-2">
                                        <RadzenText TextStyle="TextStyle.Overline">Bienvenido</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@userName</b></RadzenText>
                                        <RadzenButton Icon="lock_reset" Variant="Variant.Text" Size="ButtonSize.Small" Click="@(() => CambiarPassword())">Cambiar contraseña</RadzenButton>
                                        <RadzenButton Icon="logout" Variant="Variant.Text" Size="ButtonSize.Small" Click="@(() => Logout())">Cerrar sesión</RadzenButton>
                                    </RadzenStack>
                                </ChildContent>
                            </RadzenProfileMenu>
                        </Authorized>
                    </AuthorizeView>
                </RadzenColumn>
            </RadzenRow>
        </RadzenHeader>
    }

    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <MenuItem Text="Usuarios" Icon="person_outline" Path="/usuarios" Roles="admin_usuario" OnMenuItemClick="@OnMenuItemClick" />
            <MenuItem Text="Inmuebles" Icon="apartment" Path="/m/inmuebles" Roles="admin_propiedad" OnMenuItemClick="@OnMenuItemClick" />
            <MenuItem Text="Reparaciones" Icon="build" Path="/m/reparaciones" Roles="add_reparacion, admin_reparacion" OnMenuItemClick="@OnMenuItemClick" />

            @if (DeviceService.IsMobileDevice())
            {
                <RadzenPanelMenuItem Text="Sesión" Icon="account_circle">
                    <RadzenPanelMenuItem TextStyle="TextStyle.Subtitle2" Text="@userName" Click="@(() => OnMenuItemClick())"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Cambiar contraseña" Icon="lock_reset" Click="@(() => CambiarPassword())"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Cerrar sesión" Icon="logout" Click="@(() => Logout())"></RadzenPanelMenuItem>
                </RadzenPanelMenuItem>
            }
        </RadzenPanelMenu>
    </RadzenSidebar>

    <RadzenBody>
        <div class="rz-p-4">
            <AuthorizeView>
                <Authorized>
                    @Body
                </Authorized>
                <NotAuthorized>
                    <h1>Hola invitado!</h1>
                    Debes <a href="/">iniciar sesión</a> para acceder a la aplicación.
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </RadzenBody>
    <RadzenFooter>
        <div class="d-flex justify-content-center">@footerText</div>
    </RadzenFooter>
</RadzenLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool sidebar1Expanded = true;
    string footerText = $"Sistema de administración de inmuebles - {DateTime.Now.Year}";
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.FindFirst("Nombre")?.Value ?? "Invitado";
    }

    protected override void OnInitialized()
    {
        PageTitleService.Register(async () => await InvokeAsync(StateHasChanged));
    }

    protected override void OnParametersSet()
    {
        PageTitleService.ResetTitle();
    }

    private async Task Logout()
    {
        if (authStateProvider is CustomAuthenticationStateProvider customAuthStateProvider)
        {
            await customAuthStateProvider.Logout();
            navManager.NavigateTo("/", true);
        }
    }

    private async Task OnMenuItemClick()
    {
        if (DeviceService.IsMobileDevice())
        {
            sidebar1Expanded = false;
        }
    }

    private string GetLogoPath()
    {
        return sidebar1Expanded ? "img/AdmIn.png" : "img/Admin.png";
    }

    private async Task CambiarPassword()
    {
        Usuario usuario = new Usuario();
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        usuario.Email = authState.User.Identity.Name;

        if (usuario.Email.Contains("@mock.com"))
        {
            notificationService.Notify(NotificationSeverity.Warning, "Atención!", "No se puede editar contraseña de usuario mock");
        }
        else
        {
            var rta_usuario = await serv_Usuario.Obtener_usuario_por_email(usuario.Email);

            if (rta_usuario.Correcto)
            {
                usuario = rta_usuario.Datos;
                navManager.NavigateTo($"/usuarios/update-password/{usuario.Id}/home");
            }
        }
    }
}